namespace: fleet-default
helm:
  chart: https://github.com/madestreel/rancher-cluster-template/releases/download/1.0.0/cluster-template-0.0.1.tgz
  values:
    # cluster specific values
    cluster:
      # specify cluster name
      name: test-pve

      # specify cluster labels
      labels:
        env: test

      # specify cluster annotations
      annotations:
        catalog.cattle.io/type: cluster-template

    # specify cloud provider, options are amazonec2, digitalocean, azure, vsphere or custom

    kubernetesVersion: v1.33.3+rke2r1

    # enable local auth endpoint
    localClusterAuthEndpoint:
      enabled: false
      # specify fqdn of local access endpoint
      # fqdn: foo.bar.example
      # specify cacert of local access endpoint
      # caCerts: ""

    # specify user principal ids to be assiged as cluster members
    # clusterMembers:
    # - principalName: "local://u-z8zl5"
    #   roleTemplateName: "cluster-member"

    # enable monitoring
    monitoring:
      enabled: false
      # specify which version to install, can be semver range. If version is empty or is semver range, it will pick up the latest version.
      # version: ""
      # specify cutsom values set
      # values:
      #   foo: bar

    cloudprovider: pve

    cloudCredentialSecretName: cattle-global-data:cc-z6rb9

    # Specify nodepool options. Can add multiple node groups, specify etcd, controlplane and worker roles.
    nodepools:
      - etcd: true
        controlplane: true
        worker: true

        # specify node labels
        labels:
          topology.kubernetes.io/zone: "pve"

        # specify node taints
        taints: {}

        # specify nodepool size
        quantity: 1

        # Pause node pool
        # paused: false

        # specify displayName
        # displayName: ""

        # specify rolling update mechanism
        # rollingUpdate:
        #   The maximum number of machines that can be unavailable during the update.
        #   Value can be an absolute number (ex: 5) or a percentage of desired
        #   machines (ex: 10%).
        #   Absolute number is calculated from percentage by rounding down.
        #   This can not be 0 if MaxSurge is 0.
        #   Defaults to 0.
        #   Example: when this is set to 30%, the old MachineSet can be scaled
        #   down to 70% of desired machines immediately when the rolling update
        #   starts. Once new machines are ready, old MachineSet can be scaled
        #   down further, followed by scaling up the new MachineSet, ensuring
        #   that the total number of machines available at all times
        #   during the update is at least 70% of desired machines.
        #   maxUnavailable: "5"
        #   The maximum number of machines that can be scheduled above the
        #   desired number of machines.
        #   Value can be an absolute number (ex: 5) or a percentage of
        #   desired machines (ex: 10%).
        #   This can not be 0 if MaxUnavailable is 0.
        #   Absolute number is calculated from percentage by rounding up.
        #   Defaults to 1.
        #   Example: when this is set to 30%, the new MachineSet can be scaled
        #   up immediately when the rolling update starts, such that the total
        #   number of old and new machines do not exceed 130% of desired
        #   machines. Once old machines have been killed, new MachineSet can
        #   be scaled up further, ensuring that total number of machines running
        #   at any time during the update is at most 130% of desired machines.
        #   maxSurge: "1"

        # specify machineDeployment Labels
        # machineDeploymentLabels: {}

        # specify machineDeployment annotations
        # machineDeploymentAnnotations: {}

        name: pool1
        fullClone: false
        insecureTls: false
        isoDevice: scsi1
        memory: "12000"
        networkInterface: net0
        processorCores: "4"
        processorSockets: "1"
        resourcePool: rancher-pool
        sshUser: root
        displayName: pool1
        template: "171"
