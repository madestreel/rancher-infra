apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "nui-k8s.fullname" . }}
  labels:
    {{- include "nui-k8s.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "nui-k8s.fullname" . }}  # Add this line
  replicas: 1
  selector:
    matchLabels:
      {{- include "nui-k8s.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nui-k8s.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "nui-k8s.serviceAccountName" . }}
      automountServiceAccountToken: false
      imagePullSecrets: {{ (include "nui-k8s.imagePullSecrets" .) | indent 6 }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.nuiContainerSecurityContext | nindent 12 }}
          {{- if .Values.command }}
          command: {{ toYaml .Values.command | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 31311
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          args:
            {{- if .Values.autoloadContexts }}
            - "--nats-cli-contexts=/cli-contexts"
            {{- end }}
          volumeMounts:
            - name: db-volume
              mountPath: /db
            - name: creds-volume
              mountPath: /creds
              readOnly: true
            - name: cli-contexts
              mountPath: /cli-contexts
              readOnly: true
      volumes:
        - name: creds-volume
          secret:
            optional: true
            secretName: {{ .Values.credsVolume.name }}
            items:
            {{- range .Values.credsVolume.items }}
              - key: {{ .key }}
                path: {{ .path }}
            {{- end }}
        - name: cli-contexts
          secret:
            optional: true
            secretName: {{ .Values.contextsVolume.name }}
            items:
              {{- range .Values.contextsVolume.items }}
              - key: {{ .key }}
                path: {{ .path }}
              {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: db-volume
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 8 }}
        {{- end }}
      spec:
        accessModes:
          - ReadWriteOnce
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | default "1Gi" | quote }}
