---
apiVersion: batch/v1
kind: Job
metadata:
  name: scp-copy-secret
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
spec:
  template:
    spec:
      serviceAccount: scp-copy-secret
      imagePullSecrets:
        - name: registry-credentials
      restartPolicy: Never
      containers:
        - name: copy-secret
          image: registry.gitlab.com/telepo/smg/artifactory/mirror-bitnami-kubectl:1.25.11-debian-11-r33
          command:
            - bash
            - -ex
            - -o
            - pipefail
            - -c
            - |
              SECRET=$(kubectl -n d4sp-message-broker get secrets nats-client-auth -ojson | \
              jq '.data["auth.conf"]' -r | base64 -d)

              for ACCOUNT in $(echo '{{ .Values.auth.users | toJson }}' | jq -r '.[] | "\(.username),\(.namespace)"')
              do
                USER=$(echo $ACCOUNT | cut -f1 -d,)
                NAMESPACE=$(echo $ACCOUNT | cut -f2 -d,)
                if [ -z $NAMESPACE ] || [ $NAMESPACE == "null" ];
                then
                  NAMESPACE=scp
                fi
                
                TARGET_NAMESPACE="{{ .Values.stack.environment }}-${NAMESPACE}"

                echo "Checking namespace: $TARGET_NAMESPACE"
                if ! kubectl get namespace "$TARGET_NAMESPACE" >/dev/null 2>&1; then
                  echo "Namespace $TARGET_NAMESPACE does not exist, skipping..."
                  continue
                fi

                echo "$SECRET" | jq -r --arg USER $USER '.authorization.users[] | select(.user==$USER) | "\(.user),\(.password)"' -r | \
                while IFS=, read -r user password; do
                  echo "---"
                  kubectl -n "$TARGET_NAMESPACE" create secret generic "message-broker-${user//_/-}-secret" \
                    --from-literal=username="${user}" \
                    --from-literal=password="${password}" \
                    --dry-run=client --save-config -o yaml
                done | \
                kubectl -n "$TARGET_NAMESPACE" apply -f-
              done
---
apiVersion: batch/v1
kind: Job
metadata:
  name: nui-auth-secret
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
spec:
  template:
    spec:
      serviceAccount: scp-copy-secret
      imagePullSecrets:
        - name: registry-credentials
      restartPolicy: Never
      containers:
        - name: nui-auth-secret
          image: registry.gitlab.com/telepo/smg/artifactory/mirror-bitnami-kubectl:1.25.11-debian-11-r33
          command:
            - bash
            - -ex
            - -o
            - pipefail
            - -c
            - |
              SECRET=$(kubectl -n d4sp-message-broker get secrets nats-client-auth -ojson | \
              jq '.data["auth.conf"]' -r | base64 -d)

              echo "$SECRET" | jq -r '.authorization.users[] | select(.user=="nui") | "\(.user),\(.password)"' -r | \
              while IFS=, read -r user password; do
                echo "---"
                kubectl -n "{{ .Values.stack.environment }}-message-broker" create secret generic "nats-nui-creds" \
                  --from-literal=auth="{\"user\": \"${user}\", \"password\": \"${password}\", \"url\": \"nats://nats.d4sp-message-broker.svc.cluster.local:4222\"}"\
                  --dry-run=client --save-config -o yaml
              done | \
              kubectl -n "{{ .Values.stack.namspace }}" apply -f-
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scp-copy-secret
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: scp-copy-secret-reader
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: scp-copy-secret-reader
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: scp-copy-secret-reader
subjects:
  - kind: ServiceAccount
    name: scp-copy-secret


{{- range $k, $v := .Values.auth.users }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: scp-copy-secret-writer
  namespace: d4sp-{{ get $v "namespace" | default "scp" }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - namespaces
    verbs:
      - get
      - create
      - update
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: scp-copy-secret-writer
  namespace: d4sp-{{ get $v "namespace" | default "scp" }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: scp-copy-secret-writer
subjects:
  - kind: ServiceAccount
    name: scp-copy-secret
    namespace: d4sp-message-broker
{{- end }}
